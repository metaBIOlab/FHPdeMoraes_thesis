# COMPARING DATASETS - MOTA&HOUZEL AND YUJIANG ####

source("analises/preparing-Motahouzel-dataset.R")
source("analises/preparing-yujiang-datasets.R")

## DATA JOIN ####

dados_datasetscomp <- dplyr::select(dados_hemi_v1, SUBJ, Gender, Age, AvgThickness, TotalArea, ExposedArea, localGI, logkteorico,  hemi, Age_interval, Amostra, Diagnostic)

dados_datasetscomp$Gender <- as.factor(dados_datasetscomp$Gender)
dados_datasetscomp$Age <- as.character(dados_datasetscomp$Age)

dados_datasetscomp <- full_join(dados_datasetscomp, datasets_yujiang)

### YUJIANG DATA - AGE INTERVAL ####

# dados_datasetscomp$Age_interval[dados_datasetscomp$Age == "22-25"] <- "21-25"
# dados_datasetscomp$Age_interval[dados_datasetscomp$Age == "26-30"] <- "26-30"
# dados_datasetscomp$Age_interval[dados_datasetscomp$Age == "31-35"] <- "31-35"
# dados_datasetscomp$Age_interval[dados_datasetscomp$Age == "36+"] <- "36-40"
# 
# dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 10 &
#                                 dados_datasetscomp$Age < 15] <- "11-15"
# dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 15 &
#                                 dados_datasetscomp$Age < 20] <- "16-20"
# dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 20 &
#                                 dados_datasetscomp$Age < 25] <- "21-25"
# dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 25 &
#                                 dados_datasetscomp$Age < 30] <- "26-30"
# dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 30 &
#                                 dados_datasetscomp$Age < 35] <- "31-35"
# dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 35 &
#                                 dados_datasetscomp$Age < 40] <- "36-40"
# dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 40 &
#                                 dados_datasetscomp$Age < 45] <- "41-45"
# dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 45 &
#                                dados_datasetscomp$Age < 50] <- "46-50"
# dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 50 &
#                                dados_datasetscomp$Age < 55] <- "51-55"
# dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 55 &
#                                dados_datasetscomp$Age < 60] <- "56-60"
# dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 60 &
#                                dados_datasetscomp$Age < 65] <- "61-65"
# dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 65 &
#                                dados_datasetscomp$Age < 70] <- "66-70"
# dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 70 &
#                                dados_datasetscomp$Age < 75] <- "71-75"
# dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 75 &
#                                dados_datasetscomp$Age < 80] <- "76-80"
# dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 80 &
#                                dados_datasetscomp$Age < 85] <- "81-85"
# dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 85 &
#                                dados_datasetscomp$Age < 90] <- "86-90"
# dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 90 &
#                                 dados_datasetscomp$Age < 95] <- "91-95"
# dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 95 &
#                                 dados_datasetscomp$Age < 100] <- "96-100"
# dados_datasetscomp$Age_interval[dados_datasetscomp$Age == "95"] <- "91-95"

dados_datasetscomp$Age_interval[dados_datasetscomp$Age == "22-25"] <- "21"
dados_datasetscomp$Age_interval[dados_datasetscomp$Age == "26-30"] <- "26"
dados_datasetscomp$Age_interval[dados_datasetscomp$Age == "31-35"] <- "31"
dados_datasetscomp$Age_interval[dados_datasetscomp$Age == "36+"] <- "36"

dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 10 &
                                  dados_datasetscomp$Age < 15] <- "11"
dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 15 &
                                  dados_datasetscomp$Age < 20] <- "16"
dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 20 &
                                  dados_datasetscomp$Age < 25] <- "21"
dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 25 &
                                  dados_datasetscomp$Age < 30] <- "26"
dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 30 &
                                  dados_datasetscomp$Age < 35] <- "31"
dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 35 &
                                  dados_datasetscomp$Age < 40] <- "36"
dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 40 &
                                  dados_datasetscomp$Age < 45] <- "41"
dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 45 &
                                  dados_datasetscomp$Age < 50] <- "46"
dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 50 &
                                  dados_datasetscomp$Age < 55] <- "51"
dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 55 &
                                  dados_datasetscomp$Age < 60] <- "56"
dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 60 &
                                  dados_datasetscomp$Age < 65] <- "61"
dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 65 &
                                  dados_datasetscomp$Age < 70] <- "66"
dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 70 &
                                  dados_datasetscomp$Age < 75] <- "71"
dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 75 &
                                  dados_datasetscomp$Age < 80] <- "76"
dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 80 &
                                  dados_datasetscomp$Age < 85] <- "81"
dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 85 &
                                  dados_datasetscomp$Age < 90] <- "86"
dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 90 &
                                  dados_datasetscomp$Age < 95] <- "91"
dados_datasetscomp$Age_interval[dados_datasetscomp$Age >= 95 &
                                  dados_datasetscomp$Age < 100] <- "96"
dados_datasetscomp$Age_interval[dados_datasetscomp$Age == "95"] <- "91"

### WITH MOTA&HOUZEL DATA ####
dados_datasetscomp <- full_join(dados_datasetscomp, dados_MH2015)
dados_datasetscomp <- filter(dados_datasetscomp, localGI != 0)

# ANALYSES ####

ggplot(dados_datasetscomp, aes(log10(ExposedArea),
                               1/2*log10(AvgThickness) +log10(TotalArea))) +
  geom_point(aes(color = Amostra)) +
  geom_smooth(method = "lm", se = FALSE) +
  theme_pubclean()

# regressao linear - TODOS OS SUJEITOS VISITA 1 + DADOS BRUNO

fit_comp <-
  lm(1 / 2 * logAvgThickness + logTotalArea ~ logExposedArea, data = dados_datasetscomp, na.action=na.omit)
summary(fit_comp)

dados_comp_paper$Amostra <- as.factor(dados_comp_paper$Amostra)

#### TESTE ESTATISTICO ####
model_bruno <-
  lm(log10(sqrt(AvgThickness) * TotalArea) ~ log10(SmoothArea) + Amostra + log10(SmoothArea):Amostra,
     data = dados_comp_paper)

Anova(model_bruno, type = "II")

model_bruno2 = lm(log10(sqrt(AvgThickness) * TotalArea) ~ log10(SmoothArea) + Amostra , data = dados_comp_paper)

Anova(model_bruno2, type = "II")
summary(model_bruno2)


dados_datasetscomp$Diagnostic <- as.factor(dados_datasetscomp$Diagnostic)
dados_datasetscomp$Diagnostic = factor(dados_datasetscomp$Diagnostic, levels = c("CONTROLE", "CCL","ALZ"))

res.aov <- aov(AvgThickness ~ Amostra, data = dados_datasetscomp)
summary(res.aov)
TukeyHSD(res.aov)

my_comparisons_slope <- list( c("IDOR", "HCP500r"), c("IDOR", "NKI"), c("IDOR", "OASIS_healthy"), c("IDOR", "ADNIAD_NonLongitudinal"), c("IDOR", "ADNIControl_NonLongitudinal") )

ggplot(
  filter(dados_datasetscomp, Age_interval > 51 &
           Age_interval < 91 & Diagnostic == "CONTROLE" ),
  aes(
    x = Amostra,
    y = AvgThickness,
    fill = Amostra,
    color = Amostra
  )
) +
  geom_boxplot(aes(alpha = 0.5)) +
  ylim(1.5, 4) +
  facet_grid(. ~ Age_interval) +
  theme_pubclean() +
  stat_compare_means(label = "p.signif", method = "t.test", ref.group = "IDOR", hide.ns = TRUE, label.y = 3.5, method.args = list(alternative = "greater")) + 
  stat_compare_means(method = "anova", label.y = 4) +
  theme(axis.title = element_blank())

ggplot(
  filter(dados_datasetscomp, Age_interval > 51 &
           Age_interval < 91 & Diagnostic  == "ALZ" ),
  aes(
    x = Amostra,
    y = AvgThickness,
    fill = Amostra,
    color = Amostra
  )
) +
  geom_boxplot(aes(alpha = 0.5)) +
  ylim(1.5, 4) +
  facet_grid( . ~ Age_interval) +
  theme_pubclean() +
  stat_compare_means(label = "p.signif", method = "t.test", ref.group = "IDOR", hide.ns = TRUE, label.y = 3.5, method.args = list(alternative = "greater")) + 
  stat_compare_means(method = "anova", label.y = 4) +
  theme(axis.title = element_blank())

ggplot(
  filter(dados_datasetscomp, Age_interval > 51 &
           Age_interval < 91 & Diagnostic == "CONTROLE" ),
  aes(x = AvgThickness, color = Amostra, fill = Amostra)
) +
  geom_density(alpha = 0.3) +
  facet_grid(Age_interval ~ .) +
  theme_pubclean() + xlim (1.5, 3)

ggplot(
  filter(dados_datasetscomp, Age_interval > 51 &
           Age_interval < 91 & Diagnostic == "ALZ" ),
  aes(x = AvgThickness, color = Amostra, fill = Amostra)
) +
  geom_density(alpha = 0.3) +
  facet_grid(Age_interval ~ .) +
  theme_pubclean() + xlim (1.5, 3)








ggplot(
  filter(dados_datasetscomp, Age_interval > 51 &
           Age_interval < 91 & Diagnostic == "CONTROLE" ),
  aes(
    x = Amostra,
    y = TotalArea,
    fill = Amostra,
    color = Amostra
  )
) +
  geom_boxplot(aes(alpha = 0.5)) +
  facet_grid(. ~ Age_interval) +
  theme_pubclean() +
  stat_compare_means(label = "p.signif", method = "t.test", ref.group = "IDOR", hide.ns = TRUE, method.args = list(alternative = "greater")) + 
  stat_compare_means(method = "anova") +
  theme(axis.title = element_blank())

ggplot(
  filter(dados_datasetscomp, Age_interval > 51 &
           Age_interval < 91 & Diagnostic  == "ALZ" ),
  aes(
    x = Amostra,
    y = TotalArea,
    fill = Amostra,
    color = Amostra
  )
) +
  geom_boxplot(aes(alpha = 0.5)) +
  facet_grid( . ~ Age_interval) +
  theme_pubclean() +
  stat_compare_means(label = "p.signif", method = "t.test", ref.group = "IDOR", hide.ns = TRUE, method.args = list(alternative = "greater")) + 
  stat_compare_means(method = "anova") +
  theme(axis.title = element_blank())




ggplot(
  filter(dados_datasetscomp, Age_interval > 51 &
           Age_interval < 91 & Diagnostic == "CONTROLE" ),
  aes(
    x = Amostra,
    y = ExposedArea,
    fill = Amostra,
    color = Amostra
  )
) +
  geom_boxplot(aes(alpha = 0.5)) +
  facet_grid(. ~ Age_interval) +
  theme_pubclean() +
  stat_compare_means(label = "p.signif", method = "t.test", ref.group = "IDOR", hide.ns = TRUE, method.args = list(alternative = "less")) + 
  stat_compare_means(method = "anova") +
  theme(axis.title = element_blank())

ggplot(
  filter(dados_datasetscomp, Age_interval > 51 &
           Age_interval < 91 & Diagnostic  == "ALZ" ),
  aes(
    x = Amostra,
    y = ExposedArea,
    fill = Amostra,
    color = Amostra
  )
) +
  geom_boxplot(aes(alpha = 0.5)) +
  facet_grid( . ~ Age_interval) +
  theme_pubclean() +
  stat_compare_means(label = "p.signif", method = "t.test", ref.group = "IDOR", hide.ns = TRUE, method.args = list(alternative = "less")) + 
  stat_compare_means(method = "anova") +
  theme(axis.title = element_blank())








# regressao linear - TODOS OS SUJEITOS VISITA 1 + DADOS BRUNO

fit_comp_paper <-
  lm(log10(sqrt(AvgThickness) * TotalArea) ~ log10(SmoothArea),
     data = dados_comp_paper)
summary(fit_comp_paper)

comp_paper_Coef = tidy(fit_comp_paper,
                       conf.int = TRUE,
                       conf.level = 0.95)
comp_paper_Coef
comp_paper_Pred = augment(fit_comp_paper)
comp_paper_Pred

comp_paper_Glance = glance(fit_comp_paper)
comp_paper_Glance

dados_comp_paper$Amostra <- as.factor(dados_comp_paper$Amostra)

#### TESTE ESTATISTICO ####
model_bruno <-
  lm(log10(sqrt(AvgThickness) * TotalArea) ~ log10(SmoothArea) + Amostra + log10(SmoothArea):Amostra,
     data = dados_comp_paper)

Anova(model_bruno, type = "II")

model_bruno2 = lm(log10(sqrt(AvgThickness) * TotalArea) ~ log10(SmoothArea) + Amostra , data = dados_comp_paper)

Anova(model_bruno2, type = "II")
summary(model_bruno2)

#### COMAPRACAO ENTRE ALPHAS E KS ####

lm_amostra <- dados_comp_paper  %>%
  group_by(Amostra) %>%
  do(fit_amostra = lm(log10(sqrt(AvgThickness) * TotalArea) ~ log10(SmoothArea), data = .))

amostra_Coef = tidy(lm_amostra,
                    fit_amostra,
                    conf.int = TRUE,
                    conf.level = 0.95)
amostra_Coef

amostra_Pred = augment(lm_amostra, fit_amostra)
amostra_Pred

amostra_R2 = glance(lm_amostra, fit_amostra)
amostra_R2


# grafico
modelo <- ggplot(data = dados_comp_paper,
                 aes(
                   log10(SmoothArea),
                   log10(sqrt(AvgThickness) * TotalArea)
                 )) +
  geom_point(aes(color = Amostra)) +
  geom_smooth(method = "lm", se = FALSE) +
  labs(
    title = "Aplicacao do modelo previsto por Mota & Houzel, 2015",
    subtitle = paste(
      "Adj R2 = ",
      signif(summary(fit_comp_paper)$adj.r.squared, 5),
      ", Intercept (log(k)) = ",
      signif(fit_comp_paper$coef[[1]], 5),
      ",\nSlope ",
      expression(alpha),
      "= ",
      signif(fit_comp_paper$coef[[2]], 5),
      ",  p = ",
      signif(comp_paper_Coef[1, 5], 3)
    ),
    x = "Log Outer Area",
    y = "Log T^(1/2)*At",
    colour = "Amostra") +
  theme_pubclean()

modelo2 <- ggplot(data = dados_comp_paper,
                  aes(
                    log10(SmoothArea),
                    log10(sqrt(AvgThickness) * TotalArea), color = Amostra)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(
    title = "Aplicacao do modelo previsto por Mota & Houzel, 2015",
    x = "Log Outer Area",
    y = "Log T^(1/2)*At",
    colour = "Amostra") +
  theme_pubclean() + facet_wrap(Amostra ~ ., scales = "free") +
  stat_regline_equation()
# CONTROLES APENAS VISITA 1 + DADOS BRUNO

# regressao linear

fit_comp_paper_CTL <-
  lm(log10(sqrt(AvgThickness) * TotalArea) ~ log10(SmoothArea),
     data = dados_comp_paper_CTL)
summary(fit_comp_paper_CTL)

comp_paper_CTL_Coef = tidy(fit_comp_paper_CTL,
                           conf.int = TRUE,
                           conf.level = 0.95)
comp_paper_CTL_Coef
comp_paper_CTL_Pred = augment(fit_comp_paper_CTL)
comp_paper_CTL_Pred

comp_paper_CTL_Glance = glance(fit_comp_paper_CTL)
comp_paper_CTL_Glance


### grafico
ggplot(data = dados_comp_paper_CTL,
       aes(
         log10(SmoothArea),
         log10(sqrt(AvgThickness) * TotalArea)
       )) +
  geom_point(aes(color = Amostra)) +
  geom_smooth(method = "lm", se = FALSE) +
  labs(
    title = "Aplicacao do modelo previsto por Mota & Houzel, 2015",
    subtitle = paste(
      "Adj R2 = ",
      signif(summary(fit_comp_paper_CTL)$adj.r.squared, 5),
      ", Intercept (log(k)) = ",
      signif(fit_comp_paper_CTL$coef[[1]], 5),
      ",\nSlope",
      expression(alpha),
      "= ",
      signif(fit_comp_paper_CTL$coef[[2]], 5),
      ", p = ",
      signif(comp_paper_CTL_Coef[1, 5], 2)
    ),
    x = "Log Ae",
    y = "Log T^(1/2)*At",
    colour = "Amostra"
  ) +
  theme_pubclean()

# CONTROLES APENAS VISITA 1 SEM DADOS BRUNO

# regressao linear

fit_comp_idor <-
  lm(log10(sqrt(AvgThickness) * TotalArea) ~ log10(SmoothArea), data = filter(dados_hemi_v1, Visit == 1))
summary(fit_comp_idor)

fit_comp_idor_Coef = tidy(fit_comp_idor,
                          conf.int = TRUE,
                          conf.level = 0.95)
fit_comp_idor_Coef
fit_comp_idor_Pred = augment(fit_comp_idor)
fit_comp_idor_Pred

fit_comp_idor_Glance = glance(fit_comp_idor)
fit_comp_idor_Glance

### grafico
modelo_sujeitos_idor <- ggplot(data = ados_hemi_v1,
                               aes(log10(SmoothArea), log10(sqrt(AvgThickness) * TotalArea))) +
  geom_point(aes(color = Diagnostic)) +
  geom_smooth(method = "lm", se = FALSE) +
  labs(
    title = "Aplicacao do modelo previsto por Mota & Houzel, 2015",
    subtitle = paste(
      "Adj R2 = ",
      signif(fit_comp_idor_Glance$adj.r.squared, 5),
      ", Intercept (log(k)) = ",
      signif(fit_comp_idor_Coef$estimate[1], 5),
      ", Slope",
      expression(alpha),
      "= ",
      signif(fit_comp_idor_Coef$estimate[2], 5),
      ", p = ",
      signif(fit_comp_idor_Glance$p.value, 2)
    ),
    x = "Log Ae",
    y = "Log T^(1/2)*At"
  ) +
  theme_pubclean()
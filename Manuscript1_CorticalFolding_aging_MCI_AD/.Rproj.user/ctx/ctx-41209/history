conf.level = 0.95)
# amostras_Coef %>% kable(digits = 4) %>% kable_styling()
ggplot(
data = filter(amostras_Coef, term == "logExposedArea"),
aes(
x = reorder(Amostra, estimate),
y = estimate,
color = Amostra
)
) +
geom_point() + geom_errorbar(aes(ymin = estimate - std.error, ymax = estimate + std.error)) + geom_hline(yintercept = 1.25, linetype = "dashed")  + stat_compare_means(method = "kruskal.test") + theme_pubclean() + labs(y = "slope")
kruskal_amostras <- kruskal.test(estimate ~ Amostra,
data = filter(amostras_Coef, term == "logExposedArea"))
# tidy(kruskal_amostras) %>% kable(digits = 4) %>% kable_styling()
lm_amostras_age <-
filter(
dados_datasetscomp,
Amostra == "HCP500r" |
Amostra == "NKI" |
Amostra == "OASIS_healthy" |
Amostra == "IDORControl" |
Amostra == "IDORMCI" | Amostra == "IDORAD"
) %>%
group_by(Amostra, Age_interval) %>%
do(
fit_amostras_age = lm(
1 / 2 * logAvgThickness + logTotalArea ~ logExposedArea,
data = .,
na.action = na.omit
)
amostras_age_Coef = tidy(lm_amostras_age,
fit_amostras_age)
# amostras_age_Coef %>% kable(digits = 4) %>% kable_styling()
ggplot(
data = filter(amostras_age_Coef, term == "logExposedArea"),
aes(x = Age_interval,
y = estimate,
color = Amostra)
) +
geom_point() + geom_errorbar(aes(ymin = estimate - std.error, ymax = estimate + std.error)) + geom_hline(yintercept = 1.25, linetype = "dashed") + theme_pubclean() + labs(y = "slope") + geom_line((aes(group = Amostra, linetype = Amostra)))
dados_datasetscomp$Age <- as.numeric(dados_datasetscomp$Age)
res.aov.age <- aov(Age ~ Amostra, data = filter(dados_datasetscomp, Amostra != "Mota&Houzel2015"))
res.aov.age
summary(res.aov.age)
#TukeyHSD(res.aov.age)
ggplot(data = filter(dados_datasetscomp, Amostra != "Mota&Houzel2015"), aes(x = Age, color = Amostra, fill = Amostra, alpha = 0.4)) + geom_density() + theme_pubclean()
ggplot(data = filter(dados_datasetscomp, Amostra != "Mota&Houzel2015"), aes(x = Amostra, y = Age, color = Amostra, fill = Amostra, alpha = 0.4)) +
geom_boxplot() + theme_pubclean() +
stat_compare_means(label = "p.signif", method = "t.test", ref.group = "IDORControl", hide.ns = TRUE, label.y = 98) +
stat_compare_means(method = "kruskal.test", label.y = 105) + ylim(0, 110)
res.aov.thick <- aov(logAvgThickness ~ Amostra, data = filter(dados_datasetscomp, Amostra != "Mota&Houzel2015"))
res.aov.thick
summary(res.aov.thick)
#TukeyHSD(res.aov.thick)
ggplot(
filter(dados_datasetscomp, Age_interval > 51 &
Age_interval < 91),
aes(
x = Amostra,
y = logAvgThickness,
fill = Amostra,
color = Amostra
)
) +
geom_boxplot(aes(alpha = 0.5)) +
stat_compare_means(label = "p.signif", method = "t.test", ref.group = "IDORControl", hide.ns = TRUE, label.y = 0.45, method.args = list(alternative = "greater")) +
stat_compare_means(method = "kruskal.test", label.y = 0.50) +
facet_wrap(vars(Age_interval)) +
theme_pubclean() +
theme(axis.ticks = element_blank(), axis.text.x = element_blank()) + ylim(0.25, 0.53)
res.aov.at <- aov(logTotalArea ~ Amostra, filter(dados_datasetscomp, Amostra != "Mota&Houzel2015"))
res.aov.at
summary(res.aov.at)
#TukeyHSD(res.aov.at)
ggplot(
filter(dados_datasetscomp, Age_interval > 51 &
Age_interval < 91),
aes(
x = Amostra,
y = logTotalArea,
fill = Amostra,
color = Amostra
)
)  +
geom_boxplot(aes(alpha = 0.5)) +
stat_compare_means(label = "p.signif", method = "t.test", ref.group = "IDORControl" , hide.ns = TRUE, label.y = 5.2, method.args = list(alternative = "greater")) +
stat_compare_means(method = "kruskal.test", label.y = 5.5) +
facet_wrap(vars(Age_interval)) +
theme_pubclean() +
theme(axis.ticks = element_blank(), axis.text.x = element_blank()) + ylim(4.7, 5.8)
res.aov.ae <- aov(logExposedArea ~ Amostra, filter(dados_datasetscomp, Amostra != "Mota&Houzel2015"))
res.aov.ae
summary(res.aov.ae)
#TukeyHSD(res.aov.ae)
ggplot(
filter(dados_datasetscomp, Age_interval > 51 &
Age_interval < 91),
aes(
x = Amostra,
y = logExposedArea,
fill = Amostra,
color = Amostra
)
)  +
geom_boxplot(aes(alpha = 0.48)) +
stat_compare_means(label = "p.signif", method = "t.test", ref.group = "IDORControl" , hide.ns = TRUE, label.y = 4.75, method.args = list(alternative = "smaller")) +
stat_compare_means(method = "kruskal.test", label.y = 5.2) +
facet_wrap(vars(Age_interval)) +
theme_pubclean() +
theme(axis.ticks = element_blank(), axis.text.x = element_blank())
ggplot(data = filter(dados_datasetscomp, Amostra != "Mota&Houzel2015"), aes(logExposedArea_age_decay, 1/2*logAvgThickness_age_decay + logTotalArea_age_decay, color = Amostra, fill = Amostra)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
theme_pubclean()
lm_amostras_agedecay <- filter(dados_datasetscomp, Amostra != "Mota&Houzel2015") %>%
group_by(Amostra) %>%
do(fit_amostras_agedecay = lm(1/2 * logAvgThickness_age_decay + logTotalArea_age_decay ~ logExposedArea_age_decay, data = ., na.action = na.omit))
amostras_Coef_agedecay = tidy(lm_amostras_agedecay,
fit_amostras_agedecay,
conf.int = TRUE,
conf.level = 0.95)
#amostras_Coef_agedecay %>% kable(digits = 4) %>% kable_styling()
ggplot(
data = filter(amostras_Coef_agedecay, term == "logExposedArea_age_decay"),
aes(
x = reorder(Amostra, estimate),
y = estimate,
color = Amostra
)
) +
geom_point() + geom_errorbar(aes(ymin = estimate - std.error, ymax = estimate + std.error)) + geom_hline(yintercept = 1.25, linetype = "dashed")  + stat_compare_means(method = "kruskal.test") + theme_pubclean() + labs(y = "slope")
# kruskal_amostras <-  kruskal.test(estimate ~ Amostra,   data = filter(amostras_Coef, term == "logExposedArea"))
# tidy(kruskal_amostras) %>% kable(digits = 4) %>% kable_styling()
#
res.aov.thick <- aov(logExposedArea_age_decay ~ Amostra, data = filter(dados_datasetscomp, Amostra != "Mota&Houzel2015"))
res.aov.thick
summary(res.aov.thick)
#TukeyHSD(res.aov.thick)
ggplot(
filter(dados_datasetscomp, Age_interval > 51 &
Age_interval < 91),
aes(
x = Amostra,
y = logAvgThickness_age_decay,
fill = Amostra,
color = Amostra
)
) +
geom_boxplot(aes(alpha = 0.5)) +
stat_compare_means(label = "p.signif", method = "t.test", ref.group = "IDOR" , hide.ns = TRUE, method.args = list(alternative = "greater")) +
stat_compare_means(method = "kruskal.test") +
facet_wrap(vars(Age_interval)) +
theme_pubclean() +
theme(axis.ticks = element_blank(), axis.text.x = element_blank())
res.aov.at <- aov(logTotalArea_age_decay ~ Amostra, filter(dados_datasetscomp, Amostra != "Mota&Houzel2015"))
res.aov.at
summary(res.aov.at)
#TukeyHSD(res.aov.at)
ggplot(
filter(dados_datasetscomp, Age_interval > 51 &
Age_interval < 91),
aes(
x = Amostra,
y = logTotalArea_age_decay,
fill = Amostra,
color = Amostra
)
) +
geom_boxplot(aes(alpha = 0.5)) +
stat_compare_means(label = "p.signif", method = "t.test", ref.group = "IDOR" , hide.ns = TRUE, method.args = list(alternative = "greater")) +
stat_compare_means(method = "kruskal.test") +
facet_wrap(vars(Age_interval)) +
theme_pubclean() +
theme(axis.ticks = element_blank(), axis.text.x = element_blank())
res.aov.ae <- aov(logExposedArea_age_decay ~ Amostra, filter(dados_datasetscomp, Amostra != "Mota&Houzel2015"))
res.aov.ae
summary(res.aov.ae)
#TukeyHSD(res.aov.ae)
ggplot(
filter(dados_datasetscomp, Age_interval > 51 &
Age_interval < 91),
aes(
x = Amostra,
y = logExposedArea_age_decay,
fill = Amostra,
color = Amostra
)
) +
geom_boxplot(aes(alpha = 0.5)) +
stat_compare_means(label = "p.signif", method = "t.test", ref.group = "IDOR" , hide.ns = TRUE, method.args = list(alternative = "smaller")) +
stat_compare_means(method = "kruskal.test") +
facet_wrap(vars(Age_interval)) +
theme_pubclean() +
theme(axis.ticks = element_blank(), axis.text.x = element_blank())
# dados_hemi_v1 <- filter(dados, ROI == "hemisphere", Session == 1, method == "Yujiang_script")
ggplot(data = dados_hemi_v1, aes(Diagnostic, Age, color = Diagnostic, fill = Diagnostic, alpha = 0.2)) +
geom_boxplot() +
theme_pubclean() + stat_compare_means(method = "kruskal.test", label.y = 88) +
stat_compare_means(method = "t.test", label = "p.signif") + ylim(40, 90)
ggplot(data = dados_hemi_v1, aes(Age, AvgThickness, color = Diagnostic, fill = Diagnostic, alpha = 0.3)) +
geom_point() + stat_cor() +
geom_smooth(method = "lm", se = TRUE) +
theme_pubclean()
ggplot(data = dados_hemi_v1, aes(Age, logAvgThickness, color = Diagnostic, fill = Diagnostic, alpha = 0.3)) +
geom_point() + stat_cor() +
geom_smooth(method = "lm", se = TRUE) +
theme_pubclean()
ggplot(data = dados_hemi_v1, aes(Age, logAvgThickness_age_decay, color = Diagnostic, fill = Diagnostic, alpha = 0.3)) +
geom_point() + stat_regline_equation() +
geom_smooth(method = "lm", se = TRUE) +
theme_pubclean()
ggplot(data = dados_hemi_v1, aes(Age, TotalArea, color = Diagnostic, fill = Diagnostic, alpha = 0.3)) +
geom_point() + stat_cor() +
geom_smooth(method = "lm", se = TRUE) +
theme_pubclean()
ggplot(data = dados_hemi_v1, aes(Age, logTotalArea, color = Diagnostic, fill = Diagnostic, alpha = 0.3)) +
geom_point() + stat_cor() +
geom_smooth(method = "lm", se = TRUE) +
theme_pubclean()
ggplot(data = dados_hemi_v1, aes(Age, logTotalArea_age_decay, color = Diagnostic, fill = Diagnostic, alpha = 0.3)) +
geom_point() + stat_regline_equation() +
geom_smooth(method = "lm", se = TRUE) +
theme_pubclean()
ggplot(data = dados_hemi_v1, aes(Age, ExposedArea, color = Diagnostic, fill = Diagnostic, alpha = 0.3)) +
geom_point() + stat_cor() +
geom_smooth(method = "lm", se = TRUE) +
theme_pubclean()
ggplot(data = dados_hemi_v1, aes(Age, logExposedArea, color = Diagnostic, fill = Diagnostic, alpha = 0.3)) +
geom_point() + stat_cor() +
geom_smooth(method = "lm", se = TRUE) +
theme_pubclean()
ggplot(data = dados_hemi_v1, aes(Age, logExposedArea_age_decay, color = Diagnostic, fill = Diagnostic, alpha = 0.3)) +
geom_point() + stat_regline_equation() +
geom_smooth(method = "lm", se = TRUE) +
theme_pubclean()
ggplot(data = filter(dados_hemi_v1, Diagnostic == "CONTROLE"), aes(logExposedArea, 1/2*logAvgThickness + logTotalArea, color = Age_interval, fill = Age_interval)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
theme_pubclean() + labs(caption = paste(
"Humanos de todos os diagnosticos, apenas 1 visita, N = ",
n_distinct(dados_hemi_v1$SUBJ)))
dados_hemi_v1 <- filter(dados, ROI == "hemisphere", Session == 1, method == "Yujiang_script")
lm_diagnostic_agedecay <- dados_hemi_v1 %>%
group_by(Diagnostic) %>%
do(fit_diagnostic_agedecay = lm(1/2 * logAvgThickness_age_decay + logTotalArea_age_decay ~ logExposedArea_age_decay, data = ., na.action = na.omit))
dados_hemi_v1 <- filter(dados, ROI == "hemisphere", Session == 1, method == "FreeSurferStandard")
lm_diagnostic_agedecay <- dados_hemi_v1 %>%
group_by(Diagnostic) %>%
do(fit_diagnostic_agedecay = lm(1/2 * logAvgThickness_age_decay + logTotalArea_age_decay ~ logExposedArea_age_decay, data = ., na.action = na.omit))
diagnostic_Coef_agedecay = tidy(lm_diagnostic_agedecay,
fit_diagnostic_agedecay,
conf.int = TRUE,
conf.level = 0.95)
diagnostic_Coef_agedecay %>% kable(digits = 4) %>% kable_styling()
ggplot(
data = filter(diagnostic_Coef_agedecay, term == "logExposedArea_age_decay"),
aes(
x = Diagnostic,
y = estimate, color = Diagnostic
)
) +
geom_point() + geom_errorbar(aes(ymin = estimate - std.error, ymax = estimate + std.error)) + geom_smooth(method = "lm", se = TRUE) + geom_hline(yintercept = 1.25, linetype = "dashed")  + stat_compare_means(method = "kruskal.test") + theme_pubclean() + labs(y = "slope")
ggplot(data = dados_hemi_v1, aes(logExposedArea_age_decay, 1/2 * logAvgThickness_age_decay + logTotalArea_age_decay , color = Diagnostic, fill = Diagnostic, alpha = 0.3)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
theme_pubclean()
ggplot(data = dados_hemi_v1, aes(Age, logkteorico_age_decay, color = Diagnostic, fill = Diagnostic, alpha = 0.3)) +
geom_point() + stat_regline_equation() +
geom_smooth(method = "lm", se = TRUE) +
theme_pubclean()
library(plyr)
library(dplyr)
library(tidyr)
library(stringi)
library(tidyverse)
library(readxl)
library(modelr)
library(ggpubr)
library(readr)
library(stringr)
library(ggridges)
library(jtools)
library(purrr)
library(funModeling)
library(Hmisc)
library(lubridate)
library(ggplot2)
library(data.table)
library(ggrepel)
library(magrittr)
library(Rmisc)
library(WRS2)
#library(TeachingDemos)
library(car)
library(effsize)
library(pander)
library(knitr)
library(kableExtra)
library(plotly)
library(sjstats)
library(MASS)
# library(patchwork)
library(broom)
library(pwr)
library(R.matlab)
setwd("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/03_PROCS/STATISTICS/V6/")
setwd("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/STATISTICS/V6/")# se no idor
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
# PREPARO
# define a area de trabalho
setwd("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/STATISTICS/V6/")# se no idor
# setwd("E:/idor/Gyrification/") # se no pendrive
# setwd("C:/Users/fernanda.hansen/Desktop/aging/V6/") # se no pendrive
# setwd("C:/Users/ferna/Documents/idor/Gyrification/Processamento_longitudinal/V6/") # se no computador
# carrega os pacotes utilizados
source("01-call_packages.R")
# Chama as funcoes
source("02-funcoes.R")
# onde estao os arquivos de resultados:
path <- str_c("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/PROC_DATA/STATS/long_tables/")
# path <- str_c("C:/Users/ferna/Documents/idor/Gyrification/Processamento_longitudinal/V6/data/resultados/")
path_yujiangscript <- str_c("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/STATISTICS/V6
/data/resultados")
# path_yujiangscript <- str_c("C:/Users/ferna/Documents/idor/Gyrification/Processamento_longitudinal/V6/data/resultados/")
path_lobes <- str_c("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/PROC_DATA/STATS/LobesScaling/")
# path_lobes <- str_c("C:/Users/ferna/Documents/idor/Gyrification/Processamento_longitudinal/V6/data/resultados/")
path_sessions <- str_c("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/RAW_DATA/BIDS/")
# path_sessions <- str_c("C:/Users/ferna/Documents/idor/Gyrification/Processamento_longitudinal/V6/data/")
path_FA <- str_c("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/RAW_DATA/BIDS/")
# path_FA <- str_c("C:/Users/ferna/Documents/idor/Gyrification/Processamento_longitudinal/V6/data/FA_CC/")
# importa os resultados
source("03-import_files.R") # arquivos dos sujeitos
# PREPARO
# define a area de trabalho
setwd("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/STATISTICS/V6/")# se no idor
# setwd("E:/idor/Gyrification/") # se no pendrive
# setwd("C:/Users/fernanda.hansen/Desktop/aging/V6/") # se no pendrive
# setwd("C:/Users/ferna/Documents/idor/Gyrification/Processamento_longitudinal/V6/") # se no computador
# carrega os pacotes utilizados
source("01-call_packages.R")
# Chama as funcoes
source("02-funcoes.R")
# onde estao os arquivos de resultados:
path <- str_c("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/PROC_DATA/STATS/long_tables/")
# path <- str_c("C:/Users/ferna/Documents/idor/Gyrification/Processamento_longitudinal/V6/data/resultados/")
path_yujiangscript <- str_c("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/STATISTICS/V6
/data/resultados")
# path_yujiangscript <- str_c("C:/Users/ferna/Documents/idor/Gyrification/Processamento_longitudinal/V6/data/resultados/")
path_lobes <- str_c("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/PROC_DATA/STATS/LobesScaling/")
# path_lobes <- str_c("C:/Users/ferna/Documents/idor/Gyrification/Processamento_longitudinal/V6/data/resultados/")
path_sessions <- str_c("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/RAW_DATA/BIDS/")
# path_sessions <- str_c("C:/Users/ferna/Documents/idor/Gyrification/Processamento_longitudinal/V6/data/")
path_FA <- str_c("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/RAW_DATA/BIDS/")
# path_FA <- str_c("C:/Users/ferna/Documents/idor/Gyrification/Processamento_longitudinal/V6/data/FA_CC/")
# importa os resultados ----
source("03-import_files.R") # arquivos dos sujeitos
# organiza os arquivos ----
source("04-organiza.R")
# source("rotina_arquivos_neuroquant_comparisson.R")
dados_raw <- dados
verificar_lGI_zero <- filter(dados, localGI == 0 | is.na(localGI))
write.csv(verificar_lGI_zero, "verificar_lGI_zero.csv")
# retira os outros diagnosticos e deixa so quem tem machine definido
dados_all <- dados %>% filter(
Diagnostic == "CONTROLE" |
Diagnostic == "CCL" |
Diagnostic == "ALZ", localGI != 0 | !is.na(ExposedArea), !is.infinite(logExposedArea)) %>%
droplevels()
dados_excluidos <- anti_join(dados_raw, dados_all)
write.csv(dados_excluidos, "dados_excluidos.csv")
dados <- dados_all
# Prepara os dados para analise ----
source("05-analises_prep.R")
# deixa so Philips
#dados$Diagnostic[dados$Diagnostic == "CONTROLE"] <- "Control"
#dados$Diagnostic[dados$Diagnostic == "ALZ"] <- "AD"
#dados$Diagnostic[dados$Diagnostic == "MCI"] <- "MCI"
dados <- filter(dados, machine == "Philips-Achieva", Longitudinal_correction == "yes")
# separa em arquivo de hemisferios e de lobos ----
dados_hemi_v1 <- filter(dados, ROI == "hemisphere", Session == 1, method == "Yujiang_script")
dados_lobos_v1 <- filter(dados, ROI == "F" | ROI == "T" | ROI == "O" | ROI == "P", Session == 1, method == "Yujiang_script")
source("import_files/import_aseg_vol.R") # resultado volume
source("import_files/import_subjects.R") # arquivos dos sujeitos
# PREPARO
# define a area de trabalho
setwd("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/STATISTICS/V6/")# se no idor
# setwd("E:/idor/Gyrification/") # se no pendrive
# setwd("C:/Users/fernanda.hansen/Desktop/aging/V6/") # se no pendrive
# setwd("C:/Users/ferna/Documents/idor/Gyrification/Processamento_longitudinal/V6/") # se no computador
# carrega os pacotes utilizados
source("01-call_packages.R")
# Chama as funcoes
source("02-funcoes.R")
# onde estao os arquivos de resultados:
path <- str_c("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/PROC_DATA/STATS/long_tables/")
# path <- str_c("C:/Users/ferna/Documents/idor/Gyrification/Processamento_longitudinal/V6/data/resultados/")
path_yujiangscript <- str_c("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/STATISTICS/V6
/data/resultados")
# path_yujiangscript <- str_c("C:/Users/ferna/Documents/idor/Gyrification/Processamento_longitudinal/V6/data/resultados/")
path_lobes <- str_c("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/PROC_DATA/STATS/LobesScaling/")
# path_lobes <- str_c("C:/Users/ferna/Documents/idor/Gyrification/Processamento_longitudinal/V6/data/resultados/")
path_sessions <- str_c("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/RAW_DATA/BIDS/")
# path_sessions <- str_c("C:/Users/ferna/Documents/idor/Gyrification/Processamento_longitudinal/V6/data/")
path_FA <- str_c("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/RAW_DATA/BIDS/")
# path_FA <- str_c("C:/Users/ferna/Documents/idor/Gyrification/Processamento_longitudinal/V6/data/FA_CC/")
source("import_files/import_subjects.R") # arquivos dos sujeitos
source("import_files/import_aseg_vol.R") # resultado volume
source("import_files/import_pial.R") # resultado mris_anatomical_stats
source("import_files/import_lobesresults.R") # resultado mris_anatomical_stats
source("import_files/import_hemi_Yuijangscript.R")
data_Y_T_script <- read_csv(str_c(path_yujiangscript, "data_15_30.txt"))
View(data_Y_T_script)
read_csv(str_c(path_yujiangscript, "data_15_30.txt"))
path_yujiangscript <- str_c("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/STATISTICS/V6
/data/resultados/")
read_csv(str_c(path_yujiangscript, "data_15_30.txt"))
data_15_30 <- read.csv("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/STATISTICS/V6/data/resultados/data_15_30.txt")
View(data_15_30)
path_yujiangscript <- str_c("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/STATISTICS/V6/data/resultados/")
path_yujiangscript <- str_c("Z:/PRJ1513_GIRIFICACAO_CONTROLES/03_PROCS/STATISTICS/V6/data/resultados/")
data_Y_T_script <- read_csv(str_c(path_yujiangscript, "data_15_30.txt"))
source("import_files/import_hemi_Yuijangscript.R")
# IMPORTING HEMISPHERE DATA FROM YUJIANG/TOBIAS SCRIPT
data_Y_T_script <- read_csv(str_c(path_yujiangscript, "data_15_30.txt"))
data_Y_T_script <- data_Y_T_script %>% mutate(
SUBJ = SubjectID,
Session = "1",
hemi = Hemisphere,
ROI = "hemisphere",
method = "Yujiang_script",
Longitudinal_correction = "yes",
AvgThickness = AvgCortThickness,
logAvgThickness = log10(AvgCortThickness),
TotalArea = PialArea,
logTotalArea = log10(PialArea),
logTotalFullArea = log10(PialFullArea),
ExposedArea = SmoothPialArea,
logExposedArea = log10(SmoothPialArea),
WhiteSurfArea = WhiteArea,
logWhiteSurfArea = log10(WhiteArea),
GMvolume = GreymatterVol,
logGMvolume = log10(GreymatterVol),
logConvexHullArea = log10(ConvexHullArea),
localGI = TotalArea / ExposedArea,
logkteorico = 1 / 2 * logAvgThickness + logTotalArea - 5 / 4 * logExposedArea
) %>% dplyr::select(-c(SubjectID, Hemisphere, AvgCortThickness, PialArea, SmoothPialArea, WhiteArea, GreymatterVol))
data_Y_T_script$hemi[data_Y_T_script$hemi == "left"] <- "L"
data_Y_T_script$hemi[data_Y_T_script$hemi == "right"] <- "R"
source("import_files/import_hemi_Yuijangscript_20_40.R")
source("import_files/import_hemi_Yuijangscript_30_40.R")
source("import_files/import_hemi_Yuijangscript_50_40.R")
source("import_files/import_hemi_Yuijangscript_75_40.R")
source("import_files/import_hemi_Yuijangscript_100_40.R")
source("04-organiza.R")
dados_raw <- dados
verificar_lGI_zero <- filter(dados, localGI == 0 | is.na(localGI))
write.csv(verificar_lGI_zero, "verificar_lGI_zero.csv")
# retira os outros diagnosticos e deixa so quem tem machine definido
dados_all <- dados %>% filter(
Diagnostic == "CONTROLE" |
Diagnostic == "CCL" |
Diagnostic == "ALZ", localGI != 0 | !is.na(ExposedArea), !is.infinite(logExposedArea)) %>%
droplevels()
dados_excluidos <- anti_join(dados_raw, dados_all)
write.csv(dados_excluidos, "dados_excluidos.csv")
dados <- dados_all
# Prepara os dados para analise ----
source("05-analises_prep.R")
# deixa so Philips
#dados$Diagnostic[dados$Diagnostic == "CONTROLE"] <- "Control"
#dados$Diagnostic[dados$Diagnostic == "ALZ"] <- "AD"
#dados$Diagnostic[dados$Diagnostic == "MCI"] <- "MCI"
dados <- filter(dados, machine == "Philips-Achieva", Longitudinal_correction == "yes")
# separa em arquivo de hemisferios e de lobos ----
dados_hemi_v1 <- filter(dados, ROI == "hemisphere", Session == 1, method == "Yujiang_script")
dados_lobos_v1 <- filter(dados, ROI == "F" | ROI == "T" | ROI == "O" | ROI == "P", Session == 1, method == "Yujiang_script")
install.packages("plyr")
install.packages("dplyr")
install.packages("tidyr")
install.packages("stringi")
install.packages("tidyverse")
install.packages("modelr")
install.packages("ggpubr")
install.packages("readr")
install.packages("stringr")
install.packages("ggridges")
install.packages("jtools")
install.packages("purrr")
install.packages("funModeling")
install.packages("Hmisc")
install.packages("lubridate")
install.packages("ggplot2")
install.packages("data.table")
install.packages("ggrepel")
install.packages("magrittr")
install.packages("Rmisc")
install.packages("WRS2")
#install.packages("TeachingDemos")
install.packages("car")
install.packages("effsize")
install.packages("pander")
install.packages("knitr")
install.packages("kableExtra")
install.packages("plotly")
install.packages("sjstats")
install.packages("MASS")
# install.packages("patchwork")
install.packages("broom")
